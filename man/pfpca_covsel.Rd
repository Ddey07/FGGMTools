% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pfpca_covsel.R
\name{pfpca_covsel}
\alias{pfpca_covsel}
\title{Graph-constrained covariance estimation of multivariate functional data}
\usage{
pfpca_covsel(y, t = seq(0, 1, length.out = dim(y[[1]])[2]), FVE, A)
}
\arguments{
\item{y}{list of length p containing densely observed multivariate (p-dimensional) functional data . \code{y[[j]]} is an nxm matrix of functional data for n subjects observed on a grid of length m}

\item{t}{(optional) grid on which functional data is observed, defaults to seq(0, 1, m) where \code{m = dim(data[[1]])[2]}}

\item{FVE}{Desired proportion of variance explained in the functional principal components analysis}

\item{A}{An adjacency matrix corresponding to the underlying graphical model (p by p). Must come from an undirected graph.}
}
\value{
A list of length L (number of principal components explaining desired FVE), each with two variables:
\describe{
\item{\code{phi}}{A m by 1 vector denoting the value of l-th basis function evaluated at a grid of length m}
\item{\code{Sigma_l}}{Estimated covariance matrix for the l-th basis coefficients under graphical constraint}
}
}
\description{
Estimates the graph-constrained Karhunen-Loeve expansion for a partially separable multivariate Gaussian process.
}
\details{
This code uses slightly modified functions \code{pfpca} and some helper functions from the fgm package available at: \url{https://github.com/javzapata/fgm} by Zapata, J., Oh, S., and Petersen, A.
}
\note{
From the above list, the resulting covariance function can be obtained as \eqn{\sum_{l=1}^{L} \Sigma_l \phi_l \phi_l^T}.
}
\examples{
## Variables
# Omega - list of precision matrices, one per eigenfunction
# Sigma - list of covariance matrices, one per eigenfunction
# theta - list of functional  principal component scores
# phi - list of eigenfunctions densely observed on a time grid
# y - list containing densely observed multivariate (p-dimensional) functional data

library(mvtnorm)
library(fda)
library(igraph)


## Generate data y
 source(system.file("exec", "getOmegaSigma.R", package = "fgm"))
 theta = lapply(1:nbasis, function(b) t(rmvnorm(n = 100, sigma = Sigma[[b]])))
 theta.reshaped = lapply( 1:p, function(j){
     t(sapply(1:nbasis, function(i) theta[[i]][j,]))
 })
 phi.basis=create.fourier.basis(rangeval=c(0,1), nbasis=21, period=1)
 t = seq(0, 1, length.out = time.grid.length)
 chosen.basis = c(2, 3, 6, 7, 10, 11, 16, 17, 20, 21)
 phi = t(predict(phi.basis, t))[chosen.basis,]
 y = lapply(theta.reshaped, function(th) t(th)\%*\%phi)

# Fix an adjacency matrix for the graph between the variables
A = as_adjacency_matrix(make_tree(length(y),1,"undirected"))
# Get graph-constrained estimate of covariance function for the process
pf_ips = pfpca_covsel(y,A=A,FVE=0.8)
}
\references{
Dey D., Banerjee S., Lindquist M., and Datta A., Graph-constrained Analysis for Multivariate Functional Data. Available at arXiv.org

Zapata, J., Oh, S., and Petersen, A. (2019) Functional Graphical Models for Partially Separable Gaussian Processes. Available at arXiv.org
}
\author{
Debangan Dey, Sudipto Banerjee, Martin Lindquist and Abhirup Datta
}
